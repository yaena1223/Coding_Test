import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

public class _9_키순서 {
	static ArrayList<ArrayList<Integer>>GraphList_b;
	static ArrayList<ArrayList<Integer>>GraphList_s;
	static boolean visited_s[];
	static boolean visited_b[];
	static int cnt1;
	static int cnt2;
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		st = new StringTokenizer(br.readLine());
		GraphList_b = new ArrayList<ArrayList<Integer>>();
		GraphList_s = new ArrayList<ArrayList<Integer>>();
		int n = Integer.parseInt(st.nextToken());
		visited_s = new boolean[n+1];
		visited_b = new boolean[n+1];
		Arrays.fill(visited_s, false);
		Arrays.fill(visited_b, false);
		for(int i = 0;i<=n;i++) {
			GraphList_b.add(new ArrayList<Integer>());
			GraphList_s.add(new ArrayList<Integer>());
		}
		int m = Integer.parseInt(st.nextToken());
		for(int i = 0;i<m;i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			GraphList_b.get(a).add(b);
			GraphList_s.get(b).add(a);
		}
		int ans = 0;
		for(int i = 1;i<=n;i++) {
			cnt1 = 0;
			cnt2 = 0;
			Arrays.fill(visited_s, false);
			Arrays.fill(visited_b, false);
			dfs_b(i);
			dfs_s(i);
			if(cnt1+cnt2==n-1) ans++;
		}
		System.out.println(ans);
	}
	static void dfs_b(int x) {
		visited_b[x] = true;
		for(int y : GraphList_b.get(x)) {
			if(visited_b[y]==false) {
				cnt1++;
				dfs_b(y);
			}
		}
	}
	static void dfs_s(int x) {
		visited_s[x] = true;
		for(int y : GraphList_s.get(x)) {
			if(visited_s[y]==false) {
				dfs_s(y);
				cnt2++;
			}
		}
	}
}
