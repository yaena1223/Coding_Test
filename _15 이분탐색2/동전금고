import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class main {
	static int [] dx = {0,0,-1,1};
	static int [] dy = {1,-1,0,0};
	static int m;
	static int n;
	static boolean [][] visit;
	static int [][] array;

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st ;
		st = new StringTokenizer(br.readLine());
		m = Integer.parseInt(st.nextToken());
		n = Integer.parseInt(st.nextToken());
		array = new int[m+1][n+1];
		
		for(int i = 1;i<=m;i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 1;j<=n;j++) {
				array[i][j] = Integer.parseInt(st.nextToken());
			}
		}
	
		int l = 0, r = 1000000000;
		while(l<r) {
			int mid = (l+r)/2;
			if(bfs(mid)) r = mid;
			else l = mid+1;
		}
		System.out.println(l);
	}
	public static boolean bfs(int t) {


		Queue<Integer[]> queue = new LinkedList<>();
		visit = new boolean[m+1][n+1];
		queue.offer(new Integer[] {1,1});
		visit[1][1] = true;
		while(!queue.isEmpty()) {
			Integer[]tmp = queue.poll();
			int x = tmp[0];
			int y = tmp[1];
			for(int i = 0;i<4;i++) {
				int new_x = x + dx[i];
				int new_y = y+dy[i];
				if(new_x<1||new_y<1||new_x>m||new_y>n) 
					continue;
				if(array[new_x][new_y]<=array[x][y]+t && visit[new_x][new_y]==false){
					visit[new_x][new_y] = true;
					queue.offer(new Integer[] {new_x,new_y});
				}
			}
		}
		return visit[m][n];
	}
	
}
