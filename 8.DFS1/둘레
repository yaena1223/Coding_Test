
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class _8_둘레 {
	static boolean visited[][];
	static int array[][];
	static int dx[] = {1,-1,0,0};
	static int dy[] = {0,0,1,-1};
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		array= new int[102][102];
		visited = new boolean[102][102];
		for(int i = 0;i<102;i++) {
			for(int j = 0;j<102;j++) {
				array[i][j] = 0;
			}
		}
		int n = Integer.parseInt(br.readLine());
		for(int i = 0;i<n;i++) {
			st = new StringTokenizer(br.readLine());
			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());
			array[x][y] = 1;
		}
		dfs(0,0);
		int cnt = 0;
		for(int i = 1;i<=100;i++) {
			for(int j = 1;j<=100;j++) {
				if(array[i][j] == 1) {
					for(int k = 0;k<4;k++) {
						int newi = i+dx[k];
						int newj = j+dy[k];
						if(array[newi][newj]==0 && visited[newi][newj]) cnt++;
					}
				}
			}
		}
		System.out.println(cnt);
	}
	static void dfs(int x, int y) {
		visited[x][y] = true;
		for(int i = 0;i<4;i++) {
			int new_x = x + dx[i];
			int new_y = y + dy[i];
			if(new_x <0 || new_y <0 || new_x>101 ||new_y >101)continue;
			if(visited[new_x][new_y]== false && array[new_x][new_y]==0) dfs(new_x,new_y);
		}
	}

}
